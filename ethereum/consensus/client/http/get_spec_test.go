//go:build !integration
// +build !integration

package eth2http

import (
	"context"
	"testing"

	"github.com/golang/mock/gomock"
	httptestutils "github.com/kilnfi/go-utils/net/http/testutils"
	"github.com/protolambda/zrnt/eth2/configs"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestGetSpec(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockCli := httptestutils.NewMockSender(ctrl)
	c := NewClientFromClient(mockCli)

	t.Run("StatusOK", func(t *testing.T) { testGetSpecStatusOK(t, c, mockCli) })
}

func testGetSpecStatusOK(t *testing.T, c *Client, mockCli *httptestutils.MockSender) {
	req := httptestutils.NewGockRequest()
	req.Get("/eth/v1/config/spec").
		Reply(200).
		JSON([]byte(`{"data":{"MAX_COMMITTEES_PER_SLOT":"64","TARGET_COMMITTEE_SIZE":"128","MAX_VALIDATORS_PER_COMMITTEE":"2048","SHUFFLE_ROUND_COUNT":"90","HYSTERESIS_QUOTIENT":"4","HYSTERESIS_DOWNWARD_MULTIPLIER":"1","HYSTERESIS_UPWARD_MULTIPLIER":"5","MIN_DEPOSIT_AMOUNT":"1000000000","MAX_EFFECTIVE_BALANCE":"32000000000","EFFECTIVE_BALANCE_INCREMENT":"1000000000","MIN_ATTESTATION_INCLUSION_DELAY":"1","SLOTS_PER_EPOCH":"32","MIN_SEED_LOOKAHEAD":"1","MAX_SEED_LOOKAHEAD":"4","EPOCHS_PER_ETH1_VOTING_PERIOD":"64","SLOTS_PER_HISTORICAL_ROOT":"8192","MIN_EPOCHS_TO_INACTIVITY_PENALTY":"4","EPOCHS_PER_HISTORICAL_VECTOR":"65536","EPOCHS_PER_SLASHINGS_VECTOR":"8192","HISTORICAL_ROOTS_LIMIT":"16777216","VALIDATOR_REGISTRY_LIMIT":"1099511627776","BASE_REWARD_FACTOR":"64","WHISTLEBLOWER_REWARD_QUOTIENT":"512","PROPOSER_REWARD_QUOTIENT":"8","INACTIVITY_PENALTY_QUOTIENT":"67108864","MIN_SLASHING_PENALTY_QUOTIENT":"128","PROPORTIONAL_SLASHING_MULTIPLIER":"1","MAX_PROPOSER_SLASHINGS":"16","MAX_ATTESTER_SLASHINGS":"2","MAX_ATTESTATIONS":"128","MAX_DEPOSITS":"16","MAX_VOLUNTARY_EXITS":"16","INACTIVITY_PENALTY_QUOTIENT_ALTAIR":"50331648","MIN_SLASHING_PENALTY_QUOTIENT_ALTAIR":"64","PROPORTIONAL_SLASHING_MULTIPLIER_ALTAIR":"2","SYNC_COMMITTEE_SIZE":"512","EPOCHS_PER_SYNC_COMMITTEE_PERIOD":"256","MIN_SYNC_COMMITTEE_PARTICIPANTS":"1","INACTIVITY_PENALTY_QUOTIENT_BELLATRIX":"16777216","MIN_SLASHING_PENALTY_QUOTIENT_BELLATRIX":"32","PROPORTIONAL_SLASHING_MULTIPLIER_BELLATRIX":"3","MAX_BYTES_PER_TRANSACTION":"1073741824","MAX_TRANSACTIONS_PER_PAYLOAD":"1048576","BYTES_PER_LOGS_BLOOM":"256","MAX_EXTRA_DATA_BYTES":"32","MAX_BLS_TO_EXECUTION_CHANGES":"16","MAX_WITHDRAWALS_PER_PAYLOAD":"16","MAX_VALIDATORS_PER_WITHDRAWALS_SWEEP":"16384","FIELD_ELEMENTS_PER_BLOB":"4096","MAX_BLOB_COMMITMENTS_PER_BLOCK":"4096","MAX_BLOBS_PER_BLOCK":"6","KZG_COMMITMENT_INCLUSION_PROOF_DEPTH":"17","PRESET_BASE":"mainnet","CONFIG_NAME":"mainnet","TERMINAL_TOTAL_DIFFICULTY":"58750000000000000000000","TERMINAL_BLOCK_HASH":"0x0000000000000000000000000000000000000000000000000000000000000000","TERMINAL_BLOCK_HASH_ACTIVATION_EPOCH":"18446744073709551615","MIN_GENESIS_ACTIVE_VALIDATOR_COUNT":"16384","MIN_GENESIS_TIME":"1606824000","GENESIS_FORK_VERSION":"0x00000000","GENESIS_DELAY":"604800","ALTAIR_FORK_VERSION":"0x01000000","ALTAIR_FORK_EPOCH":"74240","BELLATRIX_FORK_VERSION":"0x02000000","BELLATRIX_FORK_EPOCH":"144896","CAPELLA_FORK_VERSION":"0x03000000","CAPELLA_FORK_EPOCH":"194048","DENEB_FORK_VERSION":"0x04000000","DENEB_FORK_EPOCH":"269568","EIP6110_FORK_VERSION":"0x05000000","EIP6110_FORK_EPOCH":"18446744073709551615","EIP7002_FORK_VERSION":"0x05000000","EIP7002_FORK_EPOCH":"18446744073709551615","WHISK_FORK_VERSION":"0x06000000","WHISK_FORK_EPOCH":"18446744073709551615","SECONDS_PER_SLOT":"12","SECONDS_PER_ETH1_BLOCK":"14","MIN_VALIDATOR_WITHDRAWABILITY_DELAY":"256","SHARD_COMMITTEE_PERIOD":"256","ETH1_FOLLOW_DISTANCE":"2048","INACTIVITY_SCORE_BIAS":"4","INACTIVITY_SCORE_RECOVERY_RATE":"16","EJECTION_BALANCE":"16000000000","MIN_PER_EPOCH_CHURN_LIMIT":"4","CHURN_LIMIT_QUOTIENT":"65536","MAX_PER_EPOCH_ACTIVATION_CHURN_LIMIT":"8","PROPOSER_SCORE_BOOST":"40","REORG_HEAD_WEIGHT_THRESHOLD":"20","REORG_PARENT_WEIGHT_THRESHOLD":"160","REORG_MAX_EPOCHS_SINCE_FINALIZATION":"2","DEPOSIT_CHAIN_ID":"1","DEPOSIT_NETWORK_ID":"1","DEPOSIT_CONTRACT_ADDRESS":"0x00000000219ab540356cbb839cbe05303d7705fa","GOSSIP_MAX_SIZE":"10485760","MAX_REQUEST_BLOCKS":"1024","EPOCHS_PER_SUBNET_SUBSCRIPTION":"256","MIN_EPOCHS_FOR_BLOCK_REQUESTS":"33024","MAX_CHUNK_SIZE":"10485760","TTFB_TIMEOUT":"5","RESP_TIMEOUT":"10","ATTESTATION_PROPAGATION_SLOT_RANGE":"32","MAXIMUM_GOSSIP_CLOCK_DISPARITY":"500","MESSAGE_DOMAIN_INVALID_SNAPPY":"0x00000000","MESSAGE_DOMAIN_VALID_SNAPPY":"0x01000000","SUBNETS_PER_NODE":"2","ATTESTATION_SUBNET_COUNT":"64","ATTESTATION_SUBNET_EXTRA_BITS":"0","ATTESTATION_SUBNET_PREFIX_BITS":"6","MAX_REQUEST_BLOCKS_DENEB":"128","MAX_REQUEST_BLOB_SIDECARS":"768","MIN_EPOCHS_FOR_BLOB_SIDECARS_REQUESTS":"4096","BLOB_SIDECAR_SUBNET_COUNT":"6","WHISK_EPOCHS_PER_SHUFFLING_PHASE":"256","WHISK_PROPOSER_SELECTION_GAP":"2","EIP7594_FORK_VERSION":"0x06000001","EIP7594_FORK_EPOCH":"18446744073709551615"}}`))

	mockCli.EXPECT().Gock(req)

	spec, err := c.GetSpec(context.Background())

	require.NoError(t, err)
	assert.Equal(
		t,
		configs.Mainnet.Phase0Preset,
		spec.Phase0Preset,
	)
	assert.Equal(
		t,
		configs.Mainnet.AltairPreset,
		spec.AltairPreset,
	)
	assert.Equal(
		t,
		configs.Mainnet.BellatrixPreset,
		spec.BellatrixPreset,
	)

	// TODO: add assert.Equal for spec.ShardPreset
	assert.Equal(
		t,
		configs.Mainnet.Config,
		spec.Config,
	)
}

// Phase0Preset    `json:",inline" yaml:",inline"`
// 	AltairPreset    `json:",inline" yaml:",inline"`
// 	BellatrixPreset `json:",inline" yaml:",inline"`
// 	ShardingPreset  `json:",inline" yaml:",inline"`
// 	Config          `json:",inline" yaml:",inline"`
// 	Setup           `json:",inline" yaml:",inline"`
